{"ast":null,"code":"var _jsxFileName = \"/home/doug/Documentos/ProjetosGitHub/movie-card-library-crud/movie-card-library-crud/src/pages/EditMovie.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\nimport Loading from '../components/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: [],\n      status: 'loading',\n      shouldRedirect: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      match: {\n        params: {\n          id\n        }\n      }\n    } = this.props;\n    movieAPI.getMovie(id).then(data => {\n      this.setState({\n        status: 'false',\n        movie: data\n      });\n    });\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie).then(() => {\n      this.setState({\n        shouldRedirect: true\n      });\n    });\n  }\n\n  render() {\n    const {\n      status,\n      shouldRedirect,\n      movie\n    } = this.state;\n\n    if (shouldRedirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (status === 'loading') {\n      return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"pageEditMovie-contain\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pageEditMovie\",\n        \"data-testid\": \"edit-movie\",\n        children: /*#__PURE__*/_jsxDEV(MovieForm, {\n          movie: movie,\n          onSubmit: this.handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  }).isRequired\n};\nexport default EditMovie;","map":{"version":3,"sources":["/home/doug/Documentos/ProjetosGitHub/movie-card-library-crud/movie-card-library-crud/src/pages/EditMovie.js"],"names":["React","Component","PropTypes","Redirect","MovieForm","movieAPI","Loading","EditMovie","constructor","props","state","movie","status","shouldRedirect","handleSubmit","bind","componentDidMount","match","params","id","getMovie","then","data","setState","updatedMovie","updateMovie","render","propTypes","shape","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAO,KAAKC,QAAZ,MAA0B,sBAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAChCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,MAAM,EAAE,SAFG;AAGXC,MAAAA,cAAc,EAAE;AAHL,KAAb;AAKA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA;AAAF;AAAV;AAAT,QAAgC,KAAKV,KAA3C;AACAJ,IAAAA,QAAQ,CAACe,QAAT,CAAkBD,EAAlB,EAAsBE,IAAtB,CAA4BC,IAAD,IAAU;AACnC,WAAKC,QAAL,CAAc;AACZX,QAAAA,MAAM,EAAE,OADI;AAEZD,QAAAA,KAAK,EAAEW;AAFK,OAAd;AAID,KALD;AAMD;;AAEDR,EAAAA,YAAY,CAACU,YAAD,EAAe;AACzBnB,IAAAA,QAAQ,CAACoB,WAAT,CAAqBD,YAArB,EAAmCH,IAAnC,CAAwC,MAAM;AAC5C,WAAKE,QAAL,CAAc;AAAEV,QAAAA,cAAc,EAAE;AAAlB,OAAd;AACD,KAFD;AAGD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEd,MAAAA,MAAF;AAAUC,MAAAA,cAAV;AAA0BF,MAAAA;AAA1B,QAAoC,KAAKD,KAA/C;;AACA,QAAIG,cAAJ,EAAoB;AAClB,0BACE,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cADF;AAGD;;AAED,QAAID,MAAM,KAAK,SAAf,EAA0B;AACxB,0BAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBACE;AAAS,MAAA,SAAS,EAAC,uBAAnB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAA+B,uBAAY,YAA3C;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,KAAK,EAAGD,KAAnB;AAA2B,UAAA,QAAQ,EAAG,KAAKG;AAA3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AA9C+B;;AAiDlCP,SAAS,CAACoB,SAAV,GAAsB;AACpBV,EAAAA,KAAK,EAAEf,SAAS,CAAC0B,KAAV,CAAgB;AACrBV,IAAAA,MAAM,EAAEhB,SAAS,CAAC0B,KAAV,CAAgB;AACtBT,MAAAA,EAAE,EAAEjB,SAAS,CAAC2B;AADQ,KAAhB;AADa,GAAhB,EAIJC;AALiB,CAAtB;AAQA,eAAevB,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\nimport Loading from '../components/Loading';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: [],\n      status: 'loading',\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.getMovie(id).then((data) => {\n      this.setState({\n        status: 'false',\n        movie: data,\n      });\n    });\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie).then(() => {\n      this.setState({ shouldRedirect: true });\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return (\n        <Redirect to=\"/\" />\n      );\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <section className=\"pageEditMovie-contain\">\n        <div className=\"pageEditMovie\" data-testid=\"edit-movie\">\n          <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n        </div>\n      </section>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n"]},"metadata":{},"sourceType":"module"}